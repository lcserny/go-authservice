// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * auth-service API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 */

package generated

import (
	"net/http"
	"strings"
)

// LogoutAPIController binds http requests to an api service and writes the service results to the http response
type LogoutAPIController struct {
	service      LogoutAPIServicer
	errorHandler ErrorHandler
}

// LogoutAPIOption for how the controller is set up.
type LogoutAPIOption func(*LogoutAPIController)

// WithLogoutAPIErrorHandler inject ErrorHandler into controller
func WithLogoutAPIErrorHandler(h ErrorHandler) LogoutAPIOption {
	return func(c *LogoutAPIController) {
		c.errorHandler = h
	}
}

// NewLogoutAPIController creates a default api controller
func NewLogoutAPIController(s LogoutAPIServicer, opts ...LogoutAPIOption) *LogoutAPIController {
	controller := &LogoutAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the LogoutAPIController
func (c *LogoutAPIController) Routes() Routes {
	return Routes{
		"SignOut": Route{
			strings.ToUpper("Post"),
			"/security/authenticate/logout",
			c.SignOut,
		},
	}
}

// SignOut -
func (c *LogoutAPIController) SignOut(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.SignOut(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
