// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * auth-service API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 */

package generated


import (
	"fmt"
)



type UserRole string

// List of UserRole
const (
	ADMIN UserRole = "ADMIN"
	STANDARD UserRole = "STANDARD"
	GUEST UserRole = "GUEST"
)

// AllowedUserRoleEnumValues is all the allowed values of UserRole enum
var AllowedUserRoleEnumValues = []UserRole{
	"ADMIN",
	"STANDARD",
	"GUEST",
}

// validUserRoleEnumValue provides a map of UserRoles for fast verification of use input
var validUserRoleEnumValues = map[UserRole]struct{}{
	"ADMIN": {},
	"STANDARD": {},
	"GUEST": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v UserRole) IsValid() bool {
	_, ok := validUserRoleEnumValues[v]
	return ok
}

// NewUserRoleFromValue returns a pointer to a valid UserRole
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewUserRoleFromValue(v string) (UserRole, error) {
	ev := UserRole(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for UserRole: valid values are %v", v, AllowedUserRoleEnumValues)
}



// AssertUserRoleRequired checks if the required fields are not zero-ed
func AssertUserRoleRequired(obj UserRole) error {
	return nil
}

// AssertUserRoleConstraints checks if the values respects the defined constraints
func AssertUserRoleConstraints(obj UserRole) error {
	return nil
}
