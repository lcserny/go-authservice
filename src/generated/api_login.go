// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * auth-service API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 */

package generated

import (
	"encoding/json"
	"errors"
	"io"
	"net/http"
	"strings"
)

// LoginAPIController binds http requests to an api service and writes the service results to the http response
type LoginAPIController struct {
	service      LoginAPIServicer
	errorHandler ErrorHandler
}

// LoginAPIOption for how the controller is set up.
type LoginAPIOption func(*LoginAPIController)

// WithLoginAPIErrorHandler inject ErrorHandler into controller
func WithLoginAPIErrorHandler(h ErrorHandler) LoginAPIOption {
	return func(c *LoginAPIController) {
		c.errorHandler = h
	}
}

// NewLoginAPIController creates a default api controller
func NewLoginAPIController(s LoginAPIServicer, opts ...LoginAPIOption) *LoginAPIController {
	controller := &LoginAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the LoginAPIController
func (c *LoginAPIController) Routes() Routes {
	return Routes{
		"SignIn": Route{
			strings.ToUpper("Post"),
			"/security/authenticate",
			c.SignIn,
		},
	}
}

// SignIn -
func (c *LoginAPIController) SignIn(w http.ResponseWriter, r *http.Request) {
	var userRegistrationParam UserRegistration
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&userRegistrationParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUserRegistrationRequired(userRegistrationParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUserRegistrationConstraints(userRegistrationParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.SignIn(r.Context(), userRegistrationParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
