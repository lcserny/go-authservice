// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * auth-service API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 */

package generated

import (
	"encoding/json"
	"errors"
	"io"
	"net/http"
	"strings"

	"github.com/go-chi/chi/v5"
)

// UpdateSingleUserDataAPIController binds http requests to an api service and writes the service results to the http response
type UpdateSingleUserDataAPIController struct {
	service      UpdateSingleUserDataAPIServicer
	errorHandler ErrorHandler
}

// UpdateSingleUserDataAPIOption for how the controller is set up.
type UpdateSingleUserDataAPIOption func(*UpdateSingleUserDataAPIController)

// WithUpdateSingleUserDataAPIErrorHandler inject ErrorHandler into controller
func WithUpdateSingleUserDataAPIErrorHandler(h ErrorHandler) UpdateSingleUserDataAPIOption {
	return func(c *UpdateSingleUserDataAPIController) {
		c.errorHandler = h
	}
}

// NewUpdateSingleUserDataAPIController creates a default api controller
func NewUpdateSingleUserDataAPIController(s UpdateSingleUserDataAPIServicer, opts ...UpdateSingleUserDataAPIOption) *UpdateSingleUserDataAPIController {
	controller := &UpdateSingleUserDataAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the UpdateSingleUserDataAPIController
func (c *UpdateSingleUserDataAPIController) Routes() Routes {
	return Routes{
		"UpdateUser": Route{
			strings.ToUpper("Put"),
			"/security/users/{id}",
			c.UpdateUser,
		},
	}
}

// UpdateUser -
func (c *UpdateSingleUserDataAPIController) UpdateUser(w http.ResponseWriter, r *http.Request) {
	idParam := chi.URLParam(r, "id")
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var userDataParam UserData
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&userDataParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUserDataRequired(userDataParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUserDataConstraints(userDataParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateUser(r.Context(), idParam, userDataParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
