// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * auth-service API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 */

package generated

import (
	"net/http"
	"strings"
)

// GetUsersResourceAPIController binds http requests to an api service and writes the service results to the http response
type GetUsersResourceAPIController struct {
	service      GetUsersResourceAPIServicer
	errorHandler ErrorHandler
}

// GetUsersResourceAPIOption for how the controller is set up.
type GetUsersResourceAPIOption func(*GetUsersResourceAPIController)

// WithGetUsersResourceAPIErrorHandler inject ErrorHandler into controller
func WithGetUsersResourceAPIErrorHandler(h ErrorHandler) GetUsersResourceAPIOption {
	return func(c *GetUsersResourceAPIController) {
		c.errorHandler = h
	}
}

// NewGetUsersResourceAPIController creates a default api controller
func NewGetUsersResourceAPIController(s GetUsersResourceAPIServicer, opts ...GetUsersResourceAPIOption) *GetUsersResourceAPIController {
	controller := &GetUsersResourceAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the GetUsersResourceAPIController
func (c *GetUsersResourceAPIController) Routes() Routes {
	return Routes{
		"GetUsers": Route{
			strings.ToUpper("Get"),
			"/security/users",
			c.GetUsers,
		},
	}
}

// GetUsers -
func (c *GetUsersResourceAPIController) GetUsers(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var pageParam int32
	if query.Has("page") {
		param, err := parseNumericParameter[int32](
			query.Get("page"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "page", Err: err}, nil)
			return
		}

		pageParam = param
	} else {
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "limit", Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var usernameParam string
	if query.Has("username") {
		param := query.Get("username")

		usernameParam = param
	} else {
	}
	var firstNameParam string
	if query.Has("firstName") {
		param := query.Get("firstName")

		firstNameParam = param
	} else {
	}
	var lastNameParam string
	if query.Has("lastName") {
		param := query.Get("lastName")

		lastNameParam = param
	} else {
	}
	result, err := c.service.GetUsers(r.Context(), pageParam, limitParam, usernameParam, firstNameParam, lastNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
