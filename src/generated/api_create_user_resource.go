// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * auth-service API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 */

package generated

import (
	"net/http"
	"strings"
)

// CreateUserResourceAPIController binds http requests to an api service and writes the service results to the http response
type CreateUserResourceAPIController struct {
	service      CreateUserResourceAPIServicer
	errorHandler ErrorHandler
}

// CreateUserResourceAPIOption for how the controller is set up.
type CreateUserResourceAPIOption func(*CreateUserResourceAPIController)

// WithCreateUserResourceAPIErrorHandler inject ErrorHandler into controller
func WithCreateUserResourceAPIErrorHandler(h ErrorHandler) CreateUserResourceAPIOption {
	return func(c *CreateUserResourceAPIController) {
		c.errorHandler = h
	}
}

// NewCreateUserResourceAPIController creates a default api controller
func NewCreateUserResourceAPIController(s CreateUserResourceAPIServicer, opts ...CreateUserResourceAPIOption) *CreateUserResourceAPIController {
	controller := &CreateUserResourceAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the CreateUserResourceAPIController
func (c *CreateUserResourceAPIController) Routes() Routes {
	return Routes{
		"Register": Route{
			strings.ToUpper("Post"),
			"/security/users",
			c.Register,
		},
	}
}

// Register -
func (c *CreateUserResourceAPIController) Register(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}

	usernameParam := r.FormValue("username")

	passwordParam := r.FormValue("password")

	firstNameParam := r.FormValue("firstName")

	lastNameParam := r.FormValue("lastName")
	result, err := c.service.Register(r.Context(), usernameParam, passwordParam, firstNameParam, lastNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
