// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * auth-service API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 */

package generated

import (
	"net/http"
	"strings"

	"github.com/go-chi/chi/v5"
)

// GetSingleUserAPIController binds http requests to an api service and writes the service results to the http response
type GetSingleUserAPIController struct {
	service      GetSingleUserAPIServicer
	errorHandler ErrorHandler
}

// GetSingleUserAPIOption for how the controller is set up.
type GetSingleUserAPIOption func(*GetSingleUserAPIController)

// WithGetSingleUserAPIErrorHandler inject ErrorHandler into controller
func WithGetSingleUserAPIErrorHandler(h ErrorHandler) GetSingleUserAPIOption {
	return func(c *GetSingleUserAPIController) {
		c.errorHandler = h
	}
}

// NewGetSingleUserAPIController creates a default api controller
func NewGetSingleUserAPIController(s GetSingleUserAPIServicer, opts ...GetSingleUserAPIOption) *GetSingleUserAPIController {
	controller := &GetSingleUserAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the GetSingleUserAPIController
func (c *GetSingleUserAPIController) Routes() Routes {
	return Routes{
		"GetUser": Route{
			strings.ToUpper("Get"),
			"/security/users/{id}",
			c.GetUser,
		},
	}
}

// GetUser -
func (c *GetSingleUserAPIController) GetUser(w http.ResponseWriter, r *http.Request) {
	idParam := chi.URLParam(r, "id")
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.GetUser(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
